# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

# Load the dataset
data_path = "C:/Users/Suggala Sai Preetham/Desktop/preetham gadi internships/kenoxoft/archive/nsl-kdd/KDDTest+.txt"  
df = pd.read_csv(data_path)

# Preprocessing
# Assuming the last column is the attack type and the rest are features
X = df.iloc[:, :-1]  # Features (exclude last column)
y = df.iloc[:, -1]   # Labels (last column)

# Encode categorical features
label_encoder = LabelEncoder()
for column in X.select_dtypes(include=['object']).columns:
    X[column] = label_encoder.fit_transform(X[column])

# Encode the labels
y = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a RandomForest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Dataset Shape:", df.shape)

# Feature Importance Analysis
# Create a DataFrame with feature names and their importance
feature_importances = model.feature_importances_
feature_names = X.columns

# Combine feature names and importance into a DataFrame
feature_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': feature_importances
})

# Sort features by importance
feature_df = feature_df.sort_values(by='Importance', ascending=False)

# Plot sorted feature importances
plt.figure(figsize=(10, 6))  # Adjust figure size
plt.barh(feature_df['Feature'], feature_df['Importance'], color='skyblue')  # Plot sorted features
plt.xlabel("Feature Importance")
plt.title("Top Features - Random Forest")
plt.gca().invert_yaxis()  # Invert y-axis to display the most important feature at the top
plt.show()
